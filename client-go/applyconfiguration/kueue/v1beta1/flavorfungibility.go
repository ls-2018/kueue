/*

 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	kueuev1beta1 "sigs.k8s.io/kueue/apis/kueue/v1beta1"
)

// FlavorFungibilityApplyConfiguration represents a declarative configuration of the FlavorFungibility type for use
// with apply.
type FlavorFungibilityApplyConfiguration struct {
	WhenCanBorrow  *kueuev1beta1.FlavorFungibilityPolicy `json:"whenCanBorrow,omitempty"`
	WhenCanPreempt *kueuev1beta1.FlavorFungibilityPolicy `json:"whenCanPreempt,omitempty"`
}

// FlavorFungibilityApplyConfiguration constructs a declarative configuration of the FlavorFungibility type for use with
// apply.
func FlavorFungibility() *FlavorFungibilityApplyConfiguration {
	return &FlavorFungibilityApplyConfiguration{}
}

// WithWhenCanBorrow sets the WhenCanBorrow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WhenCanBorrow field is set to the value of the last call.
func (b *FlavorFungibilityApplyConfiguration) WithWhenCanBorrow(value kueuev1beta1.FlavorFungibilityPolicy) *FlavorFungibilityApplyConfiguration {
	b.WhenCanBorrow = &value
	return b
}

// WithWhenCanPreempt sets the WhenCanPreempt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WhenCanPreempt field is set to the value of the last call.
func (b *FlavorFungibilityApplyConfiguration) WithWhenCanPreempt(value kueuev1beta1.FlavorFungibilityPolicy) *FlavorFungibilityApplyConfiguration {
	b.WhenCanPreempt = &value
	return b
}
