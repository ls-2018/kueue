// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
)

// ResourceGroupApplyConfiguration represents a declarative configuration of the ResourceGroup type for use
// with apply.
type ResourceGroupApplyConfiguration struct {
	CoveredResources []v1.ResourceName                `json:"coveredResources,omitempty"`
	Flavors          []FlavorQuotasApplyConfiguration `json:"flavors,omitempty"`
}

// ResourceGroupApplyConfiguration constructs a declarative configuration of the ResourceGroup type for use with
// apply.
func ResourceGroup() *ResourceGroupApplyConfiguration {
	return &ResourceGroupApplyConfiguration{}
}

// WithCoveredResources adds the given value to the CoveredResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CoveredResources field.
func (b *ResourceGroupApplyConfiguration) WithCoveredResources(values ...v1.ResourceName) *ResourceGroupApplyConfiguration {
	for i := range values {
		b.CoveredResources = append(b.CoveredResources, values[i])
	}
	return b
}

// WithFlavors adds the given value to the Flavors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Flavors field.
func (b *ResourceGroupApplyConfiguration) WithFlavors(values ...*FlavorQuotasApplyConfiguration) *ResourceGroupApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFlavors")
		}
		b.Flavors = append(b.Flavors, *values[i])
	}
	return b
}
