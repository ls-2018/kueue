// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
	kueuev1beta1 "sigs.k8s.io/kueue/apis/kueue/v1beta1"
)

// ResourceFlavorSpecApplyConfiguration represents a declarative configuration of the ResourceFlavorSpec type for use
// with apply.
type ResourceFlavorSpecApplyConfiguration struct {
	NodeLabels   map[string]string                 `json:"nodeLabels,omitempty"`
	NodeTaints   []v1.TaintApplyConfiguration      `json:"nodeTaints,omitempty"`
	Tolerations  []v1.TolerationApplyConfiguration `json:"tolerations,omitempty"`
	TopologyName *kueuev1beta1.TopologyReference   `json:"topologyName,omitempty"`
}

// ResourceFlavorSpecApplyConfiguration constructs a declarative configuration of the ResourceFlavorSpec type for use with
// apply.
func ResourceFlavorSpec() *ResourceFlavorSpecApplyConfiguration {
	return &ResourceFlavorSpecApplyConfiguration{}
}

// WithNodeLabels puts the entries into the NodeLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeLabels field,
// overwriting an existing map entries in NodeLabels field with the same key.
func (b *ResourceFlavorSpecApplyConfiguration) WithNodeLabels(entries map[string]string) *ResourceFlavorSpecApplyConfiguration {
	if b.NodeLabels == nil && len(entries) > 0 {
		b.NodeLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeLabels[k] = v
	}
	return b
}

// WithNodeTaints adds the given value to the NodeTaints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NodeTaints field.
func (b *ResourceFlavorSpecApplyConfiguration) WithNodeTaints(values ...*v1.TaintApplyConfiguration) *ResourceFlavorSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNodeTaints")
		}
		b.NodeTaints = append(b.NodeTaints, *values[i])
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *ResourceFlavorSpecApplyConfiguration) WithTolerations(values ...*v1.TolerationApplyConfiguration) *ResourceFlavorSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTolerations")
		}
		b.Tolerations = append(b.Tolerations, *values[i])
	}
	return b
}

// WithTopologyName sets the TopologyName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TopologyName field is set to the value of the last call.
func (b *ResourceFlavorSpecApplyConfiguration) WithTopologyName(value kueuev1beta1.TopologyReference) *ResourceFlavorSpecApplyConfiguration {
	b.TopologyName = &value
	return b
}
