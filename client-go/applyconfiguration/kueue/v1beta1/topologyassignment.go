// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// TopologyAssignmentApplyConfiguration represents a declarative configuration of the TopologyAssignment type for use
// with apply.
type TopologyAssignmentApplyConfiguration struct {
	Levels  []string                                     `json:"levels,omitempty"`
	Domains []TopologyDomainAssignmentApplyConfiguration `json:"domains,omitempty"`
}

// TopologyAssignmentApplyConfiguration constructs a declarative configuration of the TopologyAssignment type for use with
// apply.
func TopologyAssignment() *TopologyAssignmentApplyConfiguration {
	return &TopologyAssignmentApplyConfiguration{}
}

// WithLevels adds the given value to the Levels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Levels field.
func (b *TopologyAssignmentApplyConfiguration) WithLevels(values ...string) *TopologyAssignmentApplyConfiguration {
	for i := range values {
		b.Levels = append(b.Levels, values[i])
	}
	return b
}

// WithDomains adds the given value to the Domains field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Domains field.
func (b *TopologyAssignmentApplyConfiguration) WithDomains(values ...*TopologyDomainAssignmentApplyConfiguration) *TopologyAssignmentApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDomains")
		}
		b.Domains = append(b.Domains, *values[i])
	}
	return b
}
