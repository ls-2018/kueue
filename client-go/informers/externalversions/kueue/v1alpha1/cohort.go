// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	apiskueuev1alpha1 "sigs.k8s.io/kueue/apis/kueue/v1alpha1"
	versioned "sigs.k8s.io/kueue/client-go/clientset/versioned"
	internalinterfaces "sigs.k8s.io/kueue/client-go/informers/externalversions/internalinterfaces"
	kueuev1alpha1 "sigs.k8s.io/kueue/client-go/listers/kueue/v1alpha1"
)

// CohortInformer provides access to a shared informer and lister for
// Cohorts.
type CohortInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kueuev1alpha1.CohortLister
}

type cohortInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewCohortInformer constructs a new informer for Cohort type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCohortInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredCohortInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredCohortInformer constructs a new informer for Cohort type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCohortInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KueueV1alpha1().Cohorts(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KueueV1alpha1().Cohorts(namespace).Watch(context.TODO(), options)
			},
		},
		&apiskueuev1alpha1.Cohort{},
		resyncPeriod,
		indexers,
	)
}

func (f *cohortInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredCohortInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *cohortInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiskueuev1alpha1.Cohort{}, f.defaultInformer)
}

func (f *cohortInformer) Lister() kueuev1alpha1.CohortLister {
	return kueuev1alpha1.NewCohortLister(f.Informer().GetIndexer())
}
