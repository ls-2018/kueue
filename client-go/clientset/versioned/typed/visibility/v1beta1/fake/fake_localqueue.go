/*

 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
	v1beta1 "sigs.k8s.io/kueue/apis/visibility/v1beta1"
	visibilityv1beta1 "sigs.k8s.io/kueue/client-go/applyconfiguration/visibility/v1beta1"
	typedvisibilityv1beta1 "sigs.k8s.io/kueue/client-go/clientset/versioned/typed/visibility/v1beta1"
)

// fakeLocalQueues implements LocalQueueInterface
type fakeLocalQueues struct {
	*gentype.FakeClientWithListAndApply[*v1beta1.LocalQueue, *v1beta1.LocalQueueList, *visibilityv1beta1.LocalQueueApplyConfiguration]
	Fake *FakeVisibilityV1beta1
}

func newFakeLocalQueues(fake *FakeVisibilityV1beta1, namespace string) typedvisibilityv1beta1.LocalQueueInterface {
	return &fakeLocalQueues{
		gentype.NewFakeClientWithListAndApply[*v1beta1.LocalQueue, *v1beta1.LocalQueueList, *visibilityv1beta1.LocalQueueApplyConfiguration](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("localqueues"),
			v1beta1.SchemeGroupVersion.WithKind("LocalQueue"),
			func() *v1beta1.LocalQueue { return &v1beta1.LocalQueue{} },
			func() *v1beta1.LocalQueueList { return &v1beta1.LocalQueueList{} },
			func(dst, src *v1beta1.LocalQueueList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.LocalQueueList) []*v1beta1.LocalQueue { return gentype.ToPointerSlice(list.Items) },
			func(list *v1beta1.LocalQueueList, items []*v1beta1.LocalQueue) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// GetPendingWorkloadsSummary takes name of the localQueue, and returns the corresponding pendingWorkloadsSummary object, and an error if there is any.
func (c *fakeLocalQueues) GetPendingWorkloadsSummary(ctx context.Context, localQueueName string, options v1.GetOptions) (result *v1beta1.PendingWorkloadsSummary, err error) {
	emptyResult := &v1beta1.PendingWorkloadsSummary{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "pendingworkloads", localQueueName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.PendingWorkloadsSummary), err
}
