/*

 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
	v1beta1 "sigs.k8s.io/kueue/apis/visibility/v1beta1"
	visibilityv1beta1 "sigs.k8s.io/kueue/client-go/applyconfiguration/visibility/v1beta1"
	typedvisibilityv1beta1 "sigs.k8s.io/kueue/client-go/clientset/versioned/typed/visibility/v1beta1"
)

// fakeClusterQueues implements ClusterQueueInterface
type fakeClusterQueues struct {
	*gentype.FakeClientWithListAndApply[*v1beta1.ClusterQueue, *v1beta1.ClusterQueueList, *visibilityv1beta1.ClusterQueueApplyConfiguration]
	Fake *FakeVisibilityV1beta1
}

func newFakeClusterQueues(fake *FakeVisibilityV1beta1) typedvisibilityv1beta1.ClusterQueueInterface {
	return &fakeClusterQueues{
		gentype.NewFakeClientWithListAndApply[*v1beta1.ClusterQueue, *v1beta1.ClusterQueueList, *visibilityv1beta1.ClusterQueueApplyConfiguration](
			fake.Fake,
			"",
			v1beta1.SchemeGroupVersion.WithResource("clusterqueues"),
			v1beta1.SchemeGroupVersion.WithKind("ClusterQueue"),
			func() *v1beta1.ClusterQueue { return &v1beta1.ClusterQueue{} },
			func() *v1beta1.ClusterQueueList { return &v1beta1.ClusterQueueList{} },
			func(dst, src *v1beta1.ClusterQueueList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.ClusterQueueList) []*v1beta1.ClusterQueue {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.ClusterQueueList, items []*v1beta1.ClusterQueue) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// GetPendingWorkloadsSummary takes name of the clusterQueue, and returns the corresponding pendingWorkloadsSummary object, and an error if there is any.
func (c *fakeClusterQueues) GetPendingWorkloadsSummary(ctx context.Context, clusterQueueName string, options v1.GetOptions) (result *v1beta1.PendingWorkloadsSummary, err error) {
	emptyResult := &v1beta1.PendingWorkloadsSummary{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetSubresourceActionWithOptions(c.Resource(), "pendingworkloads", clusterQueueName, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.PendingWorkloadsSummary), err
}
