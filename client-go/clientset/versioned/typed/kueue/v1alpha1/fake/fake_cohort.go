// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"
	v1alpha1 "sigs.k8s.io/kueue/apis/kueue/v1alpha1"
	kueuev1alpha1 "sigs.k8s.io/kueue/client-go/applyconfiguration/kueue/v1alpha1"
	typedkueuev1alpha1 "sigs.k8s.io/kueue/client-go/clientset/versioned/typed/kueue/v1alpha1"
)

// fakeCohorts implements CohortInterface
type fakeCohorts struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.Cohort, *v1alpha1.CohortList, *kueuev1alpha1.CohortApplyConfiguration]
	Fake *FakeKueueV1alpha1
}

func newFakeCohorts(fake *FakeKueueV1alpha1, namespace string) typedkueuev1alpha1.CohortInterface {
	return &fakeCohorts{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.Cohort, *v1alpha1.CohortList, *kueuev1alpha1.CohortApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("cohorts"),
			v1alpha1.SchemeGroupVersion.WithKind("Cohort"),
			func() *v1alpha1.Cohort { return &v1alpha1.Cohort{} },
			func() *v1alpha1.CohortList { return &v1alpha1.CohortList{} },
			func(dst, src *v1alpha1.CohortList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.CohortList) []*v1alpha1.Cohort { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha1.CohortList, items []*v1alpha1.Cohort) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
